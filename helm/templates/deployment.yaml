apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: {{ template "helm.name" . }}
  name: {{ include "helm.name" . }}
  labels:
    {{- include "helm.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "helm.selectorLabels" . | nindent 6 }}
  strategy:
    type: Recreate
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "helm.labels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- if not .Values.image.override }}
      imagePullSecrets:
            - name: {{ .Values.image.pullSecret | default "docker-pull-creds" }}
      {{- else }}
      imagePullSecrets:
      {{- toYaml .Values.image.pullSecrets | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "helm.serviceAccountName" . }}
      securityContext:
        runAsUser: 1000
        fsGroup: 1000
      containers:
        - name: {{ template "helm.name" . }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          {{- if .Values.image.override}}
          image: "{{.Values.image.override}}"
          {{- else}}
          image: "{{.Values.image.registry | default "registry.teckdigital.de" }}/kube/{{ .Values.organization }}/{{ .Values.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          {{- end}}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: HOST
              value: "0.0.0.0"
            - name: PORT
              value: "{{ .Values.container.port | default 3000 }}"
            - name: NODE_ENV
              value: production
            - name: APP_KEYS
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.app.secret }}
                  key: APP_KEYS
            - name: API_TOKEN_SALT
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.app.secret }}
                  key: API_TOKEN_SALT
            - name: ADMIN_JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.app.secret }}
                  key: ADMIN_JWT_SECRET
            - name: TRANSFER_TOKEN_SALT
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.app.secret }}
                  key: TRANSFER_TOKEN_SALT
            - name: ENCRYPTION_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.app.secret }}
                  key: ENCRYPTION_KEY
            - name: JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.app.secret }}
                  key: JWT_SECRET
            - name: DATABASE_CLIENT
              value: postgres
            - name: DATABASE_SSL
              value: "false"
            - name: DATABASE_NAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.db.secret }}
                  key: dbname
            - name: DATABASE_HOST
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.db.secret }}
                  key: host
            - name: DATABASE_PORT
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.db.secret }}
                  key: port
            - name: DATABASE_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.db.secret }}
                  key: user
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.db.secret }}
                  key: password
            {{- if .Values.env }}
            {{- toYaml .Values.env | nindent 12 }}
            {{- end }}
          ports:
            - name: http
              containerPort: {{ .Values.container.port | default 3000 }}
              protocol: TCP
          livenessProbe:
            {{- toYaml .Values.livenessProbe | nindent 12 }}
          readinessProbe:
            {{- toYaml .Values.readinessProbe | nindent 12 }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - name: {{ include "helm.name" . }}-uploads
              mountPath: /opt/app/public/uploads
      volumes:
        - name: {{ include "helm.name" . }}-uploads
          persistentVolumeClaim:
            claimName: {{ include "helm.fullname" . }}-uploads
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
